🚦 1. What is Routing in Laravel?

Routing decides what should happen when a user visits a certain URL in your Laravel app.

Every request (like visiting /home or /api/login) is matched to a route, which points to a controller method or a closure.

🧱 Example (Basic Route)
// routes/web.php
Route::get('/', function () {
    return view('welcome');
});


When someone goes to http://yourapp.test/, it loads the welcome.blade.php view.

📂 2. Route Files in Laravel

Laravel organizes routes into separate files located in the routes/ folder:

File	                    Purpose
web.php	            For web routes (browser requests, return HTML/views)
api.php	            For API routes (return JSON data, stateless)
console.php	        For Artisan commands (CLI only)
channels.php	For broadcasting events

🧭 3. Defining Routes (with Controllers)

Instead of defining logic directly inside the route, we link it to a controller method.

Example:
use App\Http\Controllers\AuthController;

// web.php or api.php
Route::post('/login', [AuthController::class, 'login']);


Now, when a user sends a POST request to /login,
Laravel runs the login() method from your AuthController.

🎯 4. Route Parameters

You can capture dynamic values from the URL using curly braces { }.

Example:
Route::get('/users/{id}', function ($id) {
    return "User ID: " . $id;
});


Visiting /users/5 → returns User ID: 5

You can also pass it directly to a controller:

Route::get('/users/{id}', [UserController::class, 'show']);

🧩 Optional Parameters
Route::get('/users/{name?}', function ($name = 'Guest') {
    return "Hello, $name!";
});

🚫 Parameter Constraints

You can restrict route parameters using where():

Route::get('/users/{id}', function ($id) {
    return "User ID: " . $id;
})->where('id', '[0-9]+');


✅ This ensures /users/abc won’t work — only numbers.

🧍 5. Controllers and Methods

A Controller groups related route logic into one class for better organization.

Example Controller:
namespace App\Http\Controllers;

use Illuminate\Http\Request;

class UserController extends Controller
{
    public function index() {
        return 'All users';
    }

    public function show($id) {
        return "User ID: $id";
    }
}

Example Routes:
Route::get('/users', [UserController::class, 'index']);
Route::get('/users/{id}', [UserController::class, 'show']);


✅ This keeps web.php clean and easy to read.

🧱 6. Route Groups

Route groups let you apply shared settings (like middleware, prefixes, or namespaces) to multiple routes.

Example:
Route::prefix('admin')->middleware('auth')->group(function () {
    Route::get('/dashboard', [AdminController::class, 'dashboard']);
    Route::get('/users', [AdminController::class, 'users']);
});


✅ Adds /admin before each URL and applies the auth middleware to all routes in the group.

Resulting routes:

/admin/dashboard

/admin/users

🧰 7. Middleware in Routes

Middleware are filters that run before or after a route executes (e.g., authentication, logging).

Example:
Route::get('/profile', [UserController::class, 'profile'])
     ->middleware('auth');


If the user isn’t logged in, the middleware stops them before reaching the controller.

Common middleware:

auth → only for logged-in users

guest → only for visitors

throttle → limits number of requests

verified → requires verified email

⚙️ 8. Resource Controllers

A resource controller automatically creates routes for common CRUD operations (Create, Read, Update, Delete).

Create a Resource Controller:
php artisan make:controller ProductController --resource

Generated Methods:
Method	            Purpose	                    Route
index()	        Show all items	            GET /products
create()	    Show create form	        GET /products/create
store()         Save new item	            POST /products
show($id)	    Show one item	            GET /products/{id}
edit($id)	    Show edit form	            GET /products/{id}/edit
update($id)	    Update item	                PUT /products/{id}
destroy($id)	Delete item	                DELETE /products/{id}

Define All Resource Routes:
Route::resource('products', ProductController::class);


✅ This single line registers all 7 routes automatically.

🗺️ Summary Overview
Concept	                            Description	                                    Example
web.php	                           Routes for web pages	                    Route::get('/', fn() => view('home'));
api.php	                           Routes for APIs (JSON)	                Route::post('/login', [AuthController::class, 'login']);
Route Parameter	                   Dynamic value in URL	                    /users/{id}
Route Group	                       Shared settings	                        Route::prefix('admin')->group(...)
Middleware	                       Route protection or filters	            ->middleware('auth')
Controller	                       Class handling logic for a route	        UserController
Resource Controller	               Auto-generated CRUD routes	            Route::resource('posts', PostController::class)

💡 Quick Recap

Routes define the paths and actions of your app.

Controllers contain the logic those routes use.

Route groups make it easier to manage many routes together.

Middleware control access or modify requests.

Resource controllers simplify CRUD route creation.

🧠 Mnemonic:

“Routes tell Laravel where to go,
Controllers tell it what to do.”